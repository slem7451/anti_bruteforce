// Code generated by mockery v2.53.3. DO NOT EDIT.

package appmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Limiter is an autogenerated mock type for the limiter type
type Limiter struct {
	mock.Mock
}

type Limiter_Expecter struct {
	mock *mock.Mock
}

func (_m *Limiter) EXPECT() *Limiter_Expecter {
	return &Limiter_Expecter{mock: &_m.Mock}
}

// IsIPInLimit provides a mock function with given fields: _a0, _a1, _a2
func (_m *Limiter) IsIPInLimit(_a0 context.Context, _a1 string, _a2 int) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for IsIPInLimit")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Limiter_IsIPInLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsIPInLimit'
type Limiter_IsIPInLimit_Call struct {
	*mock.Call
}

// IsIPInLimit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 int
func (_e *Limiter_Expecter) IsIPInLimit(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Limiter_IsIPInLimit_Call {
	return &Limiter_IsIPInLimit_Call{Call: _e.mock.On("IsIPInLimit", _a0, _a1, _a2)}
}

func (_c *Limiter_IsIPInLimit_Call) Run(run func(_a0 context.Context, _a1 string, _a2 int)) *Limiter_IsIPInLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *Limiter_IsIPInLimit_Call) Return(_a0 bool, _a1 error) *Limiter_IsIPInLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Limiter_IsIPInLimit_Call) RunAndReturn(run func(context.Context, string, int) (bool, error)) *Limiter_IsIPInLimit_Call {
	_c.Call.Return(run)
	return _c
}

// IsLoginInLimit provides a mock function with given fields: _a0, _a1, _a2
func (_m *Limiter) IsLoginInLimit(_a0 context.Context, _a1 string, _a2 int) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for IsLoginInLimit")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Limiter_IsLoginInLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLoginInLimit'
type Limiter_IsLoginInLimit_Call struct {
	*mock.Call
}

// IsLoginInLimit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 int
func (_e *Limiter_Expecter) IsLoginInLimit(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Limiter_IsLoginInLimit_Call {
	return &Limiter_IsLoginInLimit_Call{Call: _e.mock.On("IsLoginInLimit", _a0, _a1, _a2)}
}

func (_c *Limiter_IsLoginInLimit_Call) Run(run func(_a0 context.Context, _a1 string, _a2 int)) *Limiter_IsLoginInLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *Limiter_IsLoginInLimit_Call) Return(_a0 bool, _a1 error) *Limiter_IsLoginInLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Limiter_IsLoginInLimit_Call) RunAndReturn(run func(context.Context, string, int) (bool, error)) *Limiter_IsLoginInLimit_Call {
	_c.Call.Return(run)
	return _c
}

// IsPasswordInLimit provides a mock function with given fields: _a0, _a1, _a2
func (_m *Limiter) IsPasswordInLimit(_a0 context.Context, _a1 string, _a2 int) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for IsPasswordInLimit")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Limiter_IsPasswordInLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPasswordInLimit'
type Limiter_IsPasswordInLimit_Call struct {
	*mock.Call
}

// IsPasswordInLimit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 int
func (_e *Limiter_Expecter) IsPasswordInLimit(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Limiter_IsPasswordInLimit_Call {
	return &Limiter_IsPasswordInLimit_Call{Call: _e.mock.On("IsPasswordInLimit", _a0, _a1, _a2)}
}

func (_c *Limiter_IsPasswordInLimit_Call) Run(run func(_a0 context.Context, _a1 string, _a2 int)) *Limiter_IsPasswordInLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *Limiter_IsPasswordInLimit_Call) Return(_a0 bool, _a1 error) *Limiter_IsPasswordInLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Limiter_IsPasswordInLimit_Call) RunAndReturn(run func(context.Context, string, int) (bool, error)) *Limiter_IsPasswordInLimit_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLimit provides a mock function with given fields: _a0, _a1, _a2
func (_m *Limiter) RemoveLimit(_a0 context.Context, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Limiter_RemoveLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLimit'
type Limiter_RemoveLimit_Call struct {
	*mock.Call
}

// RemoveLimit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *Limiter_Expecter) RemoveLimit(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Limiter_RemoveLimit_Call {
	return &Limiter_RemoveLimit_Call{Call: _e.mock.On("RemoveLimit", _a0, _a1, _a2)}
}

func (_c *Limiter_RemoveLimit_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *Limiter_RemoveLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Limiter_RemoveLimit_Call) Return(_a0 error) *Limiter_RemoveLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limiter_RemoveLimit_Call) RunAndReturn(run func(context.Context, string, string) error) *Limiter_RemoveLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewLimiter creates a new instance of Limiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Limiter {
	mock := &Limiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
